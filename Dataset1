#################################Production#######################################

#Load Libraries
library(RSQLite)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(dtplyr)
library(data.table)

#Load first database
con <- dbConnect(RSQLite::SQLite(), dbname = "C:/Users/i_hopis1/Documents/database.sqlite")

#Setup tables
matches <- tbl_df(dbGetQuery(con,"SELECT * FROM Match"))
team <- tbl_df(dbGetQuery(con,"SELECT * FROM Team"))
league <- tbl_df(dbGetQuery(con,"SELECT * FROM League"))
by_league <- group_by(matches,league_id)

#Select NL league
matchesNL <- matches[matches$country_id == 13240,]

#Select variables id, season, stage, date, home_team_api_id, away_team_api_id,home_team_goal, away_team_goal
myvars <- c("id", "season", "stage","date","home_team_api_id","away_team_api_id","home_team_goal","away_team_goal")
matchesNL <- matchesNL[myvars]
write.csv(matchesNL, file = "matchesNL.csv", row.names = FALSE)

#Generate table for each side
str(matchesNL)
matchesNL$home_points = NA
matchesNL$away_points = NA
for (i in 1:nrow(matchesNL)){
  if (matchesNL$home_team_goal[[i]] > matchesNL$away_team_goal[[i]]) {
  matchesNL$home_points[i] <- 3
  } else if (matchesNL$home_team_goal[[i]] < matchesNL$away_team_goal[[i]]) {
  matchesNL$home_points[i] <- 0
  } else {
  matchesNL$home_points[i] <- 1
  }
  
  if (matchesNL$home_team_goal[[i]] > matchesNL$away_team_goal[[i]]) {
  matchesNL$away_points[i] <- 0
  } else if (matchesNL$home_team_goal[[i]] < matchesNL$away_team_goal[[i]]) {
    matchesNL$away_points[i] <- 3
  } else {
    matchesNL$away_points[i] <- 1}}

matchesNLHome <- matchesNL[c("id", "season", "stage","date","home_team_api_id","away_team_api_id","home_team_goal","away_team_goal","home_points")]
matchesNLAway <- matchesNL[c("id", "season", "stage","date","home_team_api_id","away_team_api_id","home_team_goal","away_team_goal","away_points")]
matchesNLHome$home = 1
matchesNLAway$home = 0

#Attach 
matchesNL2 <- merge(dt1, dt2, by = c("id","season","stage","date", all.x=TRUE, all.y=FALSE)


#Write files
write.csv(team, file = "team.csv", row.names = FALSE)
write.csv(matchesNL, file = "my_solution.csv", row.names = FALSE)

#In between read of test dataset
matchesNL <- read.csv(file = "my_solution.csv")

#Select team
#matchesTeams <- matchesNL[which((matchesNL$home_team_api_id == 8593 & matchesNL$away_team_api_id == 8640)|(matchesNL$home_team_api_id == 8640 & matchesNL$away_team_api_id == 8593)) ,]
matchesTeams <- matchesNL[which(matchesNL$home_team_api_id == 8640 | matchesNL$away_team_api_id == 8640),]

#Take only two specific columns, then summarize them, then calculate proportions
#Then bind these together and update column names
L <- matchesTeams[c('season','result')]
K <- table(L)
G <- round(prop.table(K,1)*100,digits = 1)
G
H <- cbind(K,G)
colnames(H) <- c("Won","Draw","Lost","W%","D%","L")
H  # wrong, the columns dont indicate scores at all.

#Plots to show any trends in averages
# Grouped Bar Plot
barplot(t(G), main="Proportions per year",xlab="Year", col=c("darkblue","green","red"),beside= TRUE)

#Add names to api_ID's 
teamsNL <- distinct(select(matchesNL,home_team_api_id))
names(teamsNL) <- "team_api_id"
dt1 <- data.table(team, key = "team_api_id") 
dt2 <- data.table(teamsNL, key = "team_api_id")
teamsNL <- merge(dt1, dt2)


#Load second database
load("I:/3. Learning/R/engsoccerdata-master/data/holland.RDA")

###############################Pre-Production##################################
#Load Libraries
library(RSQLite)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
#library(dtplyr)




###############################Test area########################################
#Load Libraries
library(RSQLite)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
#library(dtplyr)

df_a <- data.frame("a","b")
df_b <- data.frame("a","c")
names(df_a) <- c("X1","X2")
names(df_b) <- c("X1","X3")
full_join(df_a, df_b, by = "X1")







###############################################################################
"#Create stage by stage dataset
matchesNL

homeNL <- select(matchesNL, -away_team_api_id)
awayNL <- select(matchesNL, -home_team_api_id)
homeNL
awayNL
homeNL$result
homeNL$points <- switch(homeNL$result,1={3},2={1},3={0})


teamsNL <- distinct(select(matchesNL,home_team_api_id))
teamsNL
df_table <- matrix(rep(1:34, times=8),teamsNL)
df_table

switch("bar", foo={"one"}, bar={"two"})




matchesNL <- arrange(matchesNL,id)
matchesNL <- spread(matchesNL,season,result)



df_table
str(df_table)

teams <- NROW(sort(unique(matchesNL$home_team_api_id)))
teams
str(teamsNL)
class(teamsNL)







